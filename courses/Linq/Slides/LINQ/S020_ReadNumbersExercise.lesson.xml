<?xml version="1.0" encoding="utf-8"?>
<Lesson xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="https://ulearn.azurewebsites.net/lesson">
  <title>Чтение массива чисел</title>
  <id>cba7bc68-f1b9-46b1-93d4-49ac113a1d02</id>
  <md>`LINQ` удобно использовать для чтения из файла и разбора простых текстовых форматов.
Особенно удобно сочетать методы `LINQ` с методами класса `File`: 
`File.ReadLines(filename)`, `File.WriteLines(filename, lines)`.

Пусть у вас есть файл, в котором каждая строка либо пустая, либо содержит одно целое число. 
Кто-то уже вызвал метод `File.ReadAllLines(filename)` и теперь у вас есть массив всех строк этого файла.

У вас даже есть метод `Main`, запускающий ваш метод на тестовых данных:</md>
  <include-code>
    <display only-body="false">Main</display>
  </include-code>
  <md>Реализуйте метод `ParseNumbers` в одно `LINQ`-выражение.</md>
  <single-file-exercise file="_ReadNumbersExercise.cs" lang-id="cs" type="check-output">
    <max-score>5</max-score>
    <initial-code>public static int[] ParseNumbers(IEnumerable&lt;string&gt; lines)
{
	return lines
		.Where(...)
		.Select(...)
		...
}</initial-code>
    <hint>`int.Parse` преобразует строку в целое число.</hint>
    <expected>0
0
1
-3
0</expected>
    <hide-expected-output>false</hide-expected-output>
    <validator>cs SingleStatementMethod</validator>
    <texts />
    <check-for-plagiarism>true</check-for-plagiarism>
    <hide-solutions>false</hide-solutions>
    <require-review>false</require-review>
    <correctness-score>5</correctness-score>
    <solution only-body="false">ParseNumbers</solution>
  </single-file-exercise>
  <default-include-code-file>_ReadNumbersExercise.cs</default-include-code-file>
</Lesson>