<?xml version="1.0" encoding="utf-8"?>
<Lesson xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="https://ulearn.azurewebsites.net/lesson">
  <title>Функции агрегирования</title>
  <id>a6baca4c-d211-428b-ae49-1f6882fd67f1</id>
  <md>В `LINQ` есть удобные методы для вычисления минимума, максимума, среднего и количества элементов в последовательности.

Вот все они в действии:</md>
  <include-code>
    <display only-body="true">MinMaxAvg</display>
  </include-code>
  <md>Все эти методы при вызове полностью обходят коллекцию.
Исключение составляет только метод `Count` — если последовательность на самом деле реализует интерфейс `ICollection`
(в котором есть свойство `Count`), то `LINQ`-метод `Count()` не станет перебирать всю коллекцию, а сразу вернет значение свойства `Count`.

Благодаря этой оптимизации, временная сложность работы `LINQ`-метода `Count()` 
на массивах, списках, хеш-таблицах и многих других структурах данных — `O(1)`.</md>
  <md>Есть еще две полезные функции: `All` и `Any`, которые проверяют, выполняется ли заданный предикат для всех элементов
последовательности или хотя бы для одного элемента соответственно.</md>
  <include-code>
    <display only-body="true">Test2</display>
  </include-code>
  <default-include-code-file>_AggregateFunctions.cs</default-include-code-file>
</Lesson>