
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
//automatically generated by Tuto
using uLearn;
namespace Parprog
{
	[Slide(@"Отслеживание статуса таска", "705dc3c8-1961-49d4-bf4c-7dbd8d4e7e03")]
	public class Отслеживание_статуса_таска
	{
		//#video lykzrrqvCV8
		[Test]
		public void TestCreation()
		{
			var task1 = Task.FromResult(2);
			Console.WriteLine(task1.Result);
		}

		[Test]
		public void TestTaskStatuses()
		{
			var task1 = new Task(() =>
								 {
									 Thread.Sleep(100);
									 throw new ArgumentException();
								 });
			var task2 = task1.ContinueWith(t =>
										   {
											   Thread.Sleep(100);
											   Console.WriteLine(1);
										   });
			PrintTaskStatuses(task1, task2);
			task1.Start();
			Thread.Sleep(50);
			PrintTaskStatuses(task1, task2);
			Thread.Sleep(100);
			PrintTaskStatuses(task1, task2);
			task2.Wait();
			PrintTaskStatuses(task1, task2);
		}

		private static void PrintTaskStatuses(params Task[] tasks)
		{
			for (int i = 0; i < tasks.Length; i++)
				Console.WriteLine("Task #{0} status is {1}", i, tasks[i].Status);
			Console.WriteLine("--------------------");
		}

		[Test]
		public void Test()
		{
			var tasks = Enumerable.Range(0, 5)
				.Select(i => Task.Run(() =>
									  {
										  Thread.Sleep(100);
										  Console.WriteLine(i);
									  }));
			PrintTaskStatuses(tasks.ToArray());
		}
	}
}