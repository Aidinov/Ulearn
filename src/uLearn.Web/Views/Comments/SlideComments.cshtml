@using System.Web.Mvc.Html
@using uLearn
@using uLearn.Web.Controllers

@model SlideCommentsModel

@functions
{

	private CommentViewModel BuildCommentViewModel(Comment comment)
	{
		var replies = Model.CommentsByParent.Get(comment.Id, new List<Comment>()).OrderByDescending(x => x.IsApproved).ThenBy(x => x.PublishTime);
		return new CommentViewModel
		{
			Comment = comment,
			LikesCount = Model.CommentsLikesCounts.Get(comment.Id, 0),
			IsLikedByUser = Model.CommentsLikedByUser.Contains(comment.Id),
			Replies = replies.Select(BuildCommentViewModel),
			CanReply = Model.CanReply,
			CanModerateComments = Model.CanModerateComments,
		};
	}

}

@helper TopLevelReplyForm()
{
	<div class="reply-form media">
		@using (Html.BeginForm("AddComment", "Course", FormMethod.Post))
		{
			@Html.AntiForgeryToken()
			@Html.Hidden("courseId", Model.CourseId)
			@Html.Hidden("slideId", Model.SlideId)
			<div class="pull-left">
				<img src="//placehold.it/24x24" />
			</div>
			<div class="media-body">
				@Html.TextArea("commentText", "", new { placeholder = "Комментировать.." })
				<button class="reply-form__send-button btn btn-primary" disabled="disabled">Отправить</button>
			</div>
		}
	</div>
}

<div class="comments">
	<h3>Комментарии</h3>
	@foreach (var topLevelComment in @Model.TopLevelComments.Where(x => x.IsApproved || Model.CanModerateComments))
	{
		@Html.Partial("_Comment", BuildCommentViewModel(topLevelComment))
	}

	@if (Model.IsAuthorizedAndCanComment)
	{
		@TopLevelReplyForm()
	}
	else if (!User.Identity.IsAuthenticated)
	{
		<div class="">
			Чтобы оставить комментарий, @Html.ActionLink("войдите", "Login", "Account")
		</div>
	}
	else
	{
		<div class="">
			Комментарии отключены
		</div>
	}
</div>

@section scripts {
	<script src="~/Scripts/slide-comments.js"> </script>
}
