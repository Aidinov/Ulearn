@* Generator: MvcHelper GeneratePrettyNames: true DisableLinePragmas: true *@
@using uLearn
@using uLearn.Model.Blocks
@using uLearn.Quizes
@using uLearn.Web.Controllers
@* ReSharper disable RedundantUsingDirective *@
@using uLearn.Web.Models
@* ReSharper restore RedundantUsingDirective *@


@helper Slide(BlockRenderContext context, HtmlHelper Html, int currentScore = 0)
{
	<div class="slide">
		<h1>
			@context.Slide.Title
			<span class="score">@Score(currentScore, context.Slide.MaxScore)</span>
		</h1>
		@Blocks(context, Html)
	</div>
}

@helper Blocks(BlockRenderContext context, HtmlHelper Html)
{
	foreach (var blockRange in context.Slide.GetBlocksRangesWithSameVisibility())
	{
		if (!blockRange[0].Hide)
		{
			foreach (var block in blockRange)
			{
				@Block((dynamic)block, context, Html)
			}
		}
		else if (context.RevealHidden)
		{
			<div class='revealed' data-toggle="tooltip" data-placement="left" title="Этот блок студенты не видят">
				@foreach (var block in blockRange)
				{
					@Block((dynamic)block, context, Html)
				}
			</div>
		}
	}
}

@helper Block(AbstractQuestionBlock block, BlockRenderContext context, HtmlHelper Html)
{
	var mark = "";
	var style = "";
	var blockScore = -1;
	QuizBlockData model = context.GetBlockData(block);
	if (model.QuizState != QuizState.NotPassed && model.QuizState != QuizState.WaitForCheck && model.QuizState != QuizState.IsChecking)
	{
		if (model.QuizModel != null && model.QuizModel.ResultsForQuizes != null)
		{
			var res = model.QuizModel.ResultsForQuizes.TryGetValue(block.Id, out blockScore) && blockScore == block.MaxScore;
			mark = "glyphicon " + (res ? "glyphicon-ok" : "glyphicon-remove");
			style = "color: " + (res ? "green" : "red");
		}
	}
	<h4>
		<i class="@mark" style="@style"></i> @block.QuestionIndex. @block.Text.RenderTex()
		<sup class="text-muted">
			@if (blockScore >= 0)
			{
				<span>
					@blockScore из @block.MaxScore балл@(block.MaxScore == 1 ? "а" : "ов")
				</span>
			}
			else
			{
				@block.MaxScore.PluralizeInRussian(new RussianPluralizationOptions
					{
						One = "балл",
						Two = "балла",
						Five = "баллов",
						smallNumbersAreWords = false,
						hideNumberOne = false
					}
				)
			}
		</sup>
	</h4>

	@QuizBlock((dynamic)block, context)
	if (context.ManualChecking != null)
	{
		<h4>Оцените от 0 до @block.MaxScore</h4>
		<div>
			<input type="number" class="form-control" min="0" max="@block.MaxScore" name="quiz__score__@(block.Id)" />
		</div>
	}

	<hr class="quiz-block-delimiter" />
}


@helper Score(int currentScore, int maxScore)
{
	@(maxScore == 0 ? "" : string.Format("{0}/{1}", currentScore, maxScore))
}

@helper Block(MdBlock block, BlockRenderContext context, HtmlHelper Html)
{
	@MvcHtmlString.Create(block.Markdown.RenderMd(context.BaseUrl))
}

@helper Block(CodeBlock block, BlockRenderContext context, HtmlHelper Html)
{
	<textarea class="code code-sample" data-lang="@block.LangId" data-ver="@block.LangVer">@block.Code</textarea>
}

@helper Block(TexBlock block, BlockRenderContext context, HtmlHelper Html)
{
	foreach (var texLine in block.TexLines)
	{
		<div class="tex">\displaystyle @texLine.Trim()</div>
	}
}

@helper Block(YoutubeBlock block, BlockRenderContext context, HtmlHelper Html)
{
	<div class="video-container">
		<iframe class="embedded-video" width="864" height="480" src="https://www.youtube.com/embed/@block.VideoId" frameborder="0" allowfullscreen></iframe>
	</div>
	<div>
		<a href="javascript://" class="popover-trigger pull-right"
		   title="Как ускорить видео?"
		   data-content="Если по иконке с шестеренкой нет возможности ускорить видео, то вам нужно &lt;a target='blank' href='http://youtube.com/html5'>вручную включить&lt;/a> использование HTML5-плеера."
		   data-placement="left">
			<span class="glyphicon glyphicon-question-sign"></span>
			Как ускорить видео?
		</a>
	</div>
}

@helper Block(ImageGaleryBlock block, BlockRenderContext context, HtmlHelper Html)
{
	<div class="flexslider">
		<ul class="slides">
			@foreach (var imageUrl in block.ImageUrls)
			{
				<li>
					<img src="@string.Format("{0}/{1}", context.BaseUrl, imageUrl)" alt="@imageUrl" />
				</li>
			}
		</ul>
	</div>
}

@helper CodeTextArea(string initialCode, string langId, string runSolutionUrl)
{
	<textarea class="code code-exercise" data-lang="@langId">@initialCode</textarea>
	<div class="solution-control btn-group ctrl-group">
		<button type="button" class="run-solution-button btn btn-primary no-rounds" data-url="@runSolutionUrl">
			Run
		</button>
	</div>

	@RunErrors()
}

@helper Block(ExerciseBlock block, BlockRenderContext context, HtmlHelper Html)
{
	ExerciseBlockData data = context.GetBlockData(block) ?? new ExerciseBlockData(context.Course.Id, context.Slide.Index);
	var acceptedSolutionUrl = data.Url.Action("AcceptedSolutions", "Course", new { courseId = context.Course.Id, slideIndex = context.Slide.Index });
	var action = data.CanSkip ? "$('#ShowSolutionsAlert').modal('show')" : string.Format("window.location='{0}'", acceptedSolutionUrl);
	var classString = context.IsGuest ? "code-guest" : "code-exercise";
	if (context.ManualChecking != null)
	{
		classString = "code-review";
	}

	var status = "";
	if (data.ReviewState == ExerciseReviewState.WaitingForReview)
	{
		status = "Все тесты пройдены, код ожидает проверки преподавателем";
	}
	else if (data.ReviewState == ExerciseReviewState.Reviewed)
	{
		status = "Все тесты пройдены, код проверен преподаваталем";
		classString = "code-reviewed";
	}
	if (! string.IsNullOrEmpty(status) && context.ManualChecking == null)
	{
		<p class="exercise-status">@status</p>
	}

	if (data.ReviewState == ExerciseReviewState.Reviewed || context.ManualChecking != null)
	{
		<div class="exercise__reviews">
			@foreach (var review in data.Reviews.OrderBy(r => r.StartLine))
			{
				<div class="exercise__review"
					 data-id="@review.Id"
				     data-start-line="@review.StartLine"
				     data-start-position="@review.StartPosition"
				     data-finish-line="@review.FinishLine"
				     data-finish-position="@review.FinishPosition">
					<div class="exercise__review__header">
						<span class="author">@review.Author.VisibleName</span>,
						@if (review.StartLine != review.FinishLine)
						{
							<span>
								строки @(review.StartLine + 1)&ndash;@(review.FinishLine + 1)
							</span>
						}
						else
						{
							<span>
								строка @(review.StartLine + 1)
							</span>
						}
						@if (context.ManualChecking != null)
						{
							<span class="close exercise__delete-review"
								  title="Удалить комментарий"
								  data-id="@review.Id"
								  data-url="@data.Url.Action("DeleteExerciseCodeReview", "Exercise", new { courseId = context.Course.Id, reviewId = review.Id })">&times;</span>
						}
					</div>
					<div class="exercise__review__comment">
						@Html.Raw(Html.EncodeMultiLineText(review.Comment))
					</div>
				</div>
			}
		</div>
	}
	<textarea id="secretCodeExercise" class="hide">@block.ExerciseInitialCode.EnsureEnoughLines(4)</textarea>
	<textarea class="code @classString" data-lang="@block.LangId">@(data.Solution ?? block.ExerciseInitialCode.EnsureEnoughLines(4))</textarea>
	<script type="text/javascript">
		function cleanUserCode() {
			var $secretCodeExercise = $('#secretCodeExercise');
			$('.code-exercise')[0].codeMirrorEditor.setValue($secretCodeExercise.text());
		}
	</script>
	if (data.ShowControls && context.ManualChecking == null)
	{
		<div class="solution-control btn-group ctrl-group">
			@if (data.ReviewState == ExerciseReviewState.Reviewed)
			{
				<a href="?again=true" class="try-again-button btn btn-primary no-rounds">
					Try again
				</a>
			}
			else
			{
				<button type="button" class="run-solution-button btn btn-primary no-rounds @(data.IsLti ? "run-solution-button-lti" : "")" data-url="@data.RunSolutionUrl">
					Run
				</button>
			}
			@if (!data.DebugView)
			{
				var e = ((ExerciseSlide)context.Slide).Exercise.HintsMd;
				<button id="GetHintButton" type="button" class="btn btn-default hints-btn"
				        data-course-id="@context.Course.Id" data-slide-index="@context.Slide.Index" data-hints-count="@e.Count"
				        data-url="@data.Url.Action("UseHint", "Hint")">
					Get hint
				</button>
				if (!data.IsLti)
				{
					<button type="button" class="btn btn-default giveup-btn" onclick="@action">
						Show solutions
					</button>
				}
				<button type="button" class="btn btn-default reset-btn no-rounds" onclick="cleanUserCode()">
					Reset
				</button>
			}
		</div>

		@RunErrors()

		<div class="panel-group ctrl-group" id="hints-accordion">
			<div id="hints-place"></div>
		</div>
		if (!data.IsLti)
		{
			@YouWillLoseScoresDialog(data)
		}
	}
	if (data.DebugView)
	{
		<div>
			<h3>Подсказки</h3>
			<ol>
				@foreach (var hint in block.HintsMd)
				{
					<li>
						@MvcHtmlString.Create(hint.RenderMd(context.BaseUrl))
					</li>
				}
			</ol>
			<h3>Комментарий после решения</h3>
			<p>@block.CommentAfterExerciseIsSolved</p>
		</div>
	}

	if (context.ManualChecking != null)
	{
		<div class="text-muted">Выделите участок кода, чтобы оставить комментарий</div>

		<div class="exercise__add-review" style="display: none" data-url="@data.Url.Action("AddExerciseCodeReview", "Exercise", new { courseId = context.Course.Id, checkingId = context.ManualChecking.Id })">
			<div>Добавить комментарий</div>
			<textarea class="exercise__add-review__comment"></textarea>
			<button class="exercise__add-review__button btn btn-success btn-sm">Сохранить</button>
		</div>

		<form method="POST" action="@data.Url.Action("ScoreExercise", "Exercise")">
			<input type="hidden" name="id" value="@context.ManualChecking.Id"/>
			<input type="hidden" name="errorUrl" value="@data.Url.RouteUrl("Course.SlideById", new { courseId = context.Course.Id, slideId = context.Slide.Url, CheckQueueItemId = context.ManualChecking.Id, context.GroupId })&amp;error=" />
			<input type="hidden" name="nextUrl" value="@data.Url.Action("ManualExerciseCheckingQueue", "Admin", new { courseId = context.Course.Id, context.GroupId })"/>

			<h4>Оцените от 0 до @block.MaxReviewScore</h4>
			<div>
				<input type="number" class="form-control" min="0" max="@block.MaxReviewScore" name="exercise__score"/>
			</div>

			<input type="submit" class="btn btn-default" value="Сохранить и вернуться">
			<input type="submit" class="btn btn-primary" value="Сохранить и перейти к следующему"
			       data-url="@data.Url.Action("CheckNextExerciseForSlide", "Admin", new { courseID = context.Course.Id, slideId = context.Slide.Id, context.GroupId })"
			       onclick="$('[name=nextUrl]').val($(this).data('url'))">
		</form>
	}
}

@helper QuizBlock(ChoiceBlock block, BlockRenderContext context)
{
	var items = block.ShuffledItems();
	var isMultiply = block.Multiple;
	var typeInp = isMultiply ? "checkbox" : "radio";
	QuizBlockData model = context.GetBlockData(block) ?? new QuizBlockData(new QuizModel(), 1, QuizState.NotPassed);
	<div class="quiz-block-mark @typeInp @typeInp-default" id='@(block.Id + "_quizBlock")'>
		@for (var itemIndex = 0; itemIndex < items.Length; itemIndex++)
		{
			var item = items[itemIndex];
			var id = isMultiply ? itemIndex + "noMult" : model.BlockIndex.ToString();
			var itemChecked = model.QuizState != QuizState.NotPassed && model.QuizModel.AnswersToQuizes[block.Id].Select(x => x.ItemId).Contains(item.Id);
			var ans = itemChecked ? "checked" : "";
			var itemClass = "";
			var title = "";
			var readonlyAttr = context.CanUserFillQuiz ? "" : "readonly";
			if (model.QuizState == QuizState.Total)
			{
				itemClass = item.IsCorrect ? "right-quiz" : itemChecked ? "wrong-quiz" : "";
				title = (item.IsCorrect ? "Правильный" : "Неправильный") + " вариант";
			}
			<div class="quiz">
				<input @ans autocomplete="off" id='@(block.Id + "quizBlock" + item.Id)' name=@("group" + id) type="@typeInp" @GetGuestDisable(context.IsGuest) @readonlyAttr>
				<label class="@itemClass" title="@title" for="@(block.Id + "quizBlock" + item.Id)" @GetGuestOnclick(context.IsGuest)>
					@item.Description.RenderTex()
				</label>
				@if (model.QuizState == QuizState.Total && model.ShowCorrectAnswer && item.IsCorrect)
				{
					<i class="glyphicon glyphicon-ok" style="color: green" title="@title"></i>
				}
				@if (model.QuizState == QuizState.Total && !string.IsNullOrEmpty(item.Explanation))
				{
					<p class="text-muted">@item.Explanation</p>
				}
			</div>
		}
	</div>
}

@helper QuizBlock(FillInBlock block, BlockRenderContext context)
{
	var value = "";
	var quizRes = "";
	QuizBlockData model = context.GetBlockData(block) ?? new QuizBlockData(new QuizModel(), 1, QuizState.NotPassed);
	if (model.QuizState != QuizState.NotPassed && model.QuizModel.AnswersToQuizes[block.Id].FirstOrDefault() != null)
	{
		var answers = model.QuizModel.AnswersToQuizes[block.Id];
		var userAnswer = answers.FirstOrDefault();
		value = userAnswer.Text;
		quizRes = model.QuizState == QuizState.Total
			? (userAnswer.IsRightAnswer ? "right-quiz" : "wrong-quiz") : "";
	}
	var sample = block.Sample;
	var readonlyAttr = context.CanUserFillQuiz ? "" : "readonly";
	<div class="quiz quiz-block-input">
		<label @GetGuestOnclick(context.IsGuest)>
			@if (block.Multiline)
			{
 				<textarea class="form-control @quizRes" id='@(block.Id + "quizBlock")' maxlength="@QuizController.MAX_FILLINBLOCK_SIZE" @GetGuestDisable(context.IsGuest) @readonlyAttr cols="70" rows="5">@value</textarea>
			}
			else
			{
				<input
					autocomplete="off"
					class="form-control @quizRes"
					value="@value" id='@(block.Id + "quizBlock")'
					maxlength="@QuizController.MAX_FILLINBLOCK_SIZE"
					size="68"
					@GetGuestDisable(context.IsGuest)
					@readonlyAttr/>
			}
		</label>
	</div>
	if (model.QuizState == QuizState.Total)
	{
		if (model.ShowCorrectAnswer)
		{
			<div>Правильный ответ: @sample</div>
		}
		if (!string.IsNullOrEmpty(block.Explanation))
		{
			<div class="text-muted">@block.Explanation</div>
		}
	}
}

@helper QuizBlock(IsTrueBlock block, BlockRenderContext context)
{
	var tchecked = "";
	var fchecked = "";
	var trueItemClass = "";
	var falseItemClass = "";
	var ttitle = "";
	var ftitle = "";
	QuizBlockData model = context.GetBlockData(block) ?? new QuizBlockData(new QuizModel(), 1, QuizState.NotPassed);
	if (model.QuizState != QuizState.NotPassed && model.QuizModel.AnswersToQuizes[block.Id].FirstOrDefault() != null)
	{
		var userAnswer = model.QuizModel.AnswersToQuizes[block.Id].Select(x => x.Text).FirstOrDefault() == "True";
		tchecked = userAnswer ? "checked" : "";
		fchecked = userAnswer ? "" : "checked";
		if (model.QuizState == QuizState.Total)
		{
			trueItemClass = block.Answer ? "right-quiz" : userAnswer ? "wrong-quiz" : "";
			falseItemClass = !block.Answer ? "right-quiz" : !userAnswer ? "wrong-quiz" : "";
		}
	}
	if (model.QuizState == QuizState.Total)
	{
		ttitle = (block.Answer ? "Правильный" : "Неправильный") + " вариант";
		ftitle = (!block.Answer ? "Правильный" : "Неправильный") + " вариант";
	}
	var readonlyAttr = context.CanUserFillQuiz ? "" : "readonly";
	<div class="radio quiz-block-mark" id="@(block.Id + "_quizBlock")">
		<div class="quiz">
			<input autocomplete="off" @tchecked id='@(block.Id + "quizBlock" + "True")' name='@(block.Id + "group")' type="radio" @GetGuestDisable(context.IsGuest) @readonlyAttr>
			<label class="@trueItemClass" title="@ttitle" for="@(block.Id + "quizBlock" + "True")" @GetGuestOnclick(context.IsGuest)>
				Верно
			</label>
			@if (model.QuizState == QuizState.Total && model.ShowCorrectAnswer && block.Answer)
			{
				<i class="glyphicon glyphicon-ok" style="color: green" title="@ttitle"></i>
			}
		</div>
		<div class="quiz">
			<input autocomplete="off" @fchecked id='@(block.Id + "quizBlock" + "False")' name='@(block.Id + "group")' type="radio" @GetGuestDisable(context.IsGuest)>
			<label class="@falseItemClass" title="@ftitle" for="@(block.Id + "quizBlock" + "False")" @GetGuestOnclick(context.IsGuest)>
				Неверно
			</label>
			@if (model.QuizState == QuizState.Total && model.ShowCorrectAnswer && !block.Answer)
			{
				<i class="glyphicon glyphicon-ok" style="color: green" title="@ftitle"></i>
			}
		</div>
	</div>
	if (model.QuizState == QuizState.Total && !string.IsNullOrEmpty(block.Explanation))
	{
		<div class="text-muted">@block.Explanation</div>
	}
}

@helper QuizBlock(OrderingBlock block, BlockRenderContext context)
{
	var items = block.ShuffledItems();
	var correctItems = block.Items;
	QuizBlockData model = context.GetBlockData(block) ?? new QuizBlockData(new QuizModel(), 1, QuizState.NotPassed);
	if (model.QuizState != QuizState.NotPassed && model.QuizModel.AnswersToQuizes[block.Id].FirstOrDefault() != null)
	{
		var userAnswers = model.QuizModel.AnswersToQuizes[block.Id].Select(x => x.ItemId).ToList();
		items = items.OrderBy(item => userAnswers.IndexOf(item.GetHash())).ToArray();
	}
	<div class="quiz-block-ordering @(context.CanUserFillQuiz ? "" : "not-movable")" id='@(block.Id + "_quizBlock")'>
		@if (model.QuizState == QuizState.Total && model.ShowCorrectAnswer)
		{
			<div class="quiz-block-ordering__correct-description row">
				<div class="text-success col-sm-5 col-sm-offset-6">Правильный ответ</div>
			</div>
		}
		<ul>
			@for (var itemIndex = 0; itemIndex < items.Length; itemIndex++)
			{
				var item = items[itemIndex];
				<li class="row">
					<div class="quiz quiz-block-ordering__item col-xs-12 col-sm-5" data-item-id="@item.GetHash()">
						@if (context.CanUserFillQuiz)
						{
							<div class="quiz-block-ordering__item__icons">
								<span class="glyphicon glyphicon-arrow-up"></span>
								<span class="glyphicon glyphicon-arrow-down"></span>
							</div>
						}
						<input autocomplete="off" id='@(block.Id + "quizBlock" + item.GetHash())' type="hidden">
						<div class="text">@item.Text.RenderTex()</div>
					</div>
					@if (model.QuizState == QuizState.Total && model.ShowCorrectAnswer)
					{
						var correctItem = correctItems[itemIndex];
						<div class="quiz-block-ordering__item correct col-xs-12 col-sm-offset-1 col-sm-5">
							@correctItem.Text.RenderTex()
						</div>
					}
				</li>
			}
		</ul>
	</div>
	if (model.QuizState == QuizState.Total && !string.IsNullOrEmpty(block.Explanation))
	{
		<div class="text-muted">@block.Explanation</div>
	}
}

@helper QuizBlock(MatchingBlock block, BlockRenderContext context)
{
	var fixedItems = block.GetMatches(block.ShuffleFixed);
	var movableItems = block.GetMatches(true);

	QuizBlockData model = context.GetBlockData(block) ?? new QuizBlockData(new QuizModel(), 1, QuizState.NotPassed);
	if (model.QuizState != QuizState.NotPassed && model.QuizModel.AnswersToQuizes[block.Id].FirstOrDefault() != null)
	{
		var userAnswers = model.QuizModel.AnswersToQuizes[block.Id];
		fixedItems = block.GetMatches().OrderBy(item => userAnswers.FindIndex(answer => item.GetHashForFixedItem() == answer.ItemId)).ToList();
		movableItems = GetMovableItemsAccordingToUserAnswers(userAnswers, fixedItems);
	}
	<div class="quiz-block-matching @(context.CanUserFillQuiz ? "" : "not-movable")" id='@(block.Id + "_quizBlock")'>
		@if (model.QuizState == QuizState.NotPassed)
		{
			<div class="quiz-block-matching__description text-muted">Перетащите элементы из правого столбца на свободные места</div>
		}
		@if (model.QuizState == QuizState.Total)
		{
			<div class="quiz-block-matching__correct-description row">
				<div class="text-muted col-sm-3 col-sm-offset-3">Ваш вариант</div>
				@if (model.ShowCorrectAnswer)
				{
					<div class="text-success col-sm-3 col-sm-offset-1">Правильный вариант</div>
				}
			</div>
		}
		<ul>
			@for (var itemIndex = 0; itemIndex < fixedItems.Count; itemIndex++)
			{
				var fixedItem = fixedItems[itemIndex];
				var movableItem = movableItems[itemIndex];
				var isRightClass = "";
				if (model.QuizState == QuizState.Total && model.ShowCorrectAnswer)
				{
					isRightClass = fixedItem.Id == movableItem.Id ? "right" : "wrong";
				}
				<li>
					<div class="quiz quiz-block-matching__item @isRightClass row">
						<input autocomplete="off" id='@(block.Id + "quizBlock" + fixedItem.GetHashForFixedItem())' type="hidden">
						<div class="quiz-block-matching__fixed-item col-xs-3" data-item-id="@fixedItem.GetHashForFixedItem()">@fixedItem.FixedItem.RenderTex()</div>
						@if (model.QuizState == QuizState.NotPassed)
						{
							<div class="quiz-block-matching__droppable col-xs-3" data-block-id="@block.Id" data-item-id="@fixedItem.GetHashForFixedItem()"></div>
							<div class="quiz-block-matching__source__droppable col-xs-3 col-sm-offset-1 added" data-block-id="@block.Id" data-movable-item-id="@movableItem.GetHashForMovableItem()">
								<div class="quiz-block-matching__movable-item" data-block-id="@block.Id" data-item-id="@movableItem.GetHashForMovableItem()">@movableItem.MovableItem.RenderTex()</div>
							</div>
						}
						else
						{
							<div class="quiz-block-matching__droppable col-xs-3 added" data-block-id="@block.Id" data-item-id="@fixedItem.GetHashForFixedItem()" data-movable-item-id="@movableItem.GetHashForMovableItem()">
								<div class="quiz-block-matching__movable-item" data-block-id="@block.Id" data-item-id="@movableItem.GetHashForMovableItem()">@movableItem.MovableItem.RenderTex()</div>
							</div>
							if (model.QuizState == QuizState.Total && model.ShowCorrectAnswer)
							{
								<div class="quiz-block-matching__fixed-item correct col-xs-3 col-sm-offset-1">
									@fixedItem.MovableItem.RenderTex()
								</div>
							}
							if (context.CanUserFillQuiz)
							{
								<div class="quiz-block-matching__source__droppable col-xs-3 col-sm-offset-1" data-block-id="@block.Id">
								</div>
							}
						}
						
					</div>
				</li>
			}
		</ul>
	</div>
	if (model.QuizState == QuizState.Total && !string.IsNullOrEmpty(block.Explanation))
	{
		<div class="text-muted">@block.Explanation</div>
	}
}

@helper RunErrors()
{
	<div class="run-result run-service-error">
		<div class="run-verdict label-warning">Ошибка сервера :(</div>
		<pre class="no-rounds"><code class="run-details"></code></pre>
	</div>

	<div class="run-result run-compile-error">
		<div class="run-verdict label-danger">Ошибка компиляции</div>
		<pre class="no-rounds"><code class="run-details"></code></pre>
	</div>

	<div class="run-result run-style-error">
		<div class="run-verdict label-danger">Нарушение стилевых требований</div>
		<pre class="no-rounds"><code class="run-details"></code></pre>
		<div>
			<small>В некоторых ситуациях стилевые проверки тут могут быть жестче, чем необходимо в реальной жизни.</small>
		</div>
	</div>

	<div class="run-result run-wa">
		<div class="run-verdict label-danger">Неверный результат</div>
		<div class="diff-table tablesorter"></div>
	</div>

	<div class="run-result run-wa-no-diff">
		<div class="run-verdict label-danger">Неверный результат</div>
		<pre class="no-rounds"><code class="run-details"></code></pre>
	</div>

	<div class="run-result run-success">
		<div class="run-verdict label-success clearfix">Успех!</div>
		<div class="run-review-status label-info clearfix">Ваше решение отправлено на проверку преподавателю</div>
		<pre class="no-rounds"><code class="run-details"></code></pre>
	</div>
}

@helper YouWillLoseScoresDialog(ExerciseBlockData data)
{
	<div class="modal fade" id="ShowSolutionsAlert" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
					<h4 class="modal-title">Внимание</h4>
				</div>
				<div class="modal-body">
					<p>Вы потеряете возможность получить баллы за эту задачу, если продолжите.</p>
				</div>
				<div class="modal-footer">
					<a class="btn btn-default" href="@data.Url.Action("AcceptedSolutions", "Course", new { data.CourseId, data.SlideIndex })">Продолжить</a>
					<button type="button" class="btn btn-primary" data-dismiss="modal">Отмена</button>
				</div>
			</div>
		</div>
	</div>
}

@functions
{
	private static string GetGuestOnclick(bool isGuest)
	{
		return isGuest ? "onclick=loginForContinue()" : "";
	}

	private static string GetGuestDisable(bool isGuest)
	{
		return isGuest ? "disabled" : null;
	}

	private static List<MatchingMatch> GetMovableItemsAccordingToUserAnswers(List<UserQuiz> userAnswers, List<MatchingMatch> fixedItems)
	{
		var movableItems = new List<MatchingMatch>();
		foreach (var fixedItem in fixedItems)
		{
			var userAnswer = userAnswers.FirstOrDefault(answer => answer.ItemId == fixedItem.GetHashForFixedItem());
			if (userAnswer == null)
				continue;
			movableItems.Add(fixedItems.FirstOrDefault(item => item.GetHashForMovableItem() == userAnswer.Text));
		}
		return movableItems;
	}

}