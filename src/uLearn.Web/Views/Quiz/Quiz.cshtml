@using uLearn.Quizes
@using uLearn.Web.Controllers
@using uLearn.Web.Views.Course
@using Ulearn.Common.Extensions

@model QuizModel
@{
	var quizSlide = Model.Slide;

	var status = "";
	var triesCountMessage = Model.MaxDropCount == QuizController.InfinityDropsCount ? "∞ (преподаватели не ограничены в попытках)" : (Model.MaxDropCount + 1).ToString();
	if (!Model.IsGuest && Model.QuizState == QuizState.NotPassed)
	{
		status = string.Format(
			"Попытка {0} из {1}",
			Model.TryNumber + 1,
			triesCountMessage
		);
	}
	else if (!Model.IsGuest && Model.QuizState == QuizState.Subtotal)
	{
		status = string.Format(
			"Использован{0} {1} из {2}",
			Model.TryNumber % 10 == 1 && (Model.TryNumber / 10) % 10 != 1 ? "а" : "о",
			Model.TryNumber.PluralizeInRussian(RussianPluralizationOptions.Tries),
			triesCountMessage
		);
	}
	else if (!Model.IsGuest && Model.QuizState == QuizState.Total)
	{
		status = string.Format("Решено с {0} попытки", Model.TryNumber);
	}
	else if (Model.ManualQuizCheckQueueItem != null)
	{
		status = string.Format("{0}, попытка {1} из {2}",
			Model.ManualQuizCheckQueueItem.User.VisibleName,
			Model.TryNumber,
			Model.MaxDropCount + 1);
	}
	else if (Model.QuizState == QuizState.WaitForCheck)
	{
		status = "Ожидает проверки преподавателем";
	}
	else if (Model.QuizState == QuizState.IsChecking)
	{
		status = "Проверяется преподавателем";
	}

	if (!string.IsNullOrEmpty(status))
	{
		<p class="quiz-status">@status</p>
	}
	if (!string.IsNullOrEmpty(Request.QueryString["error"]))
	{
		<p class="alert alert-danger">@Request.QueryString["error"]</p>
	}

	var remains = Model.MaxDropCount - Model.TryNumber + 1;
	var context = new BlockRenderContext(
		Model.Course,
		Model.Slide,
		quizSlide.Info.DirectoryRelativePath,
		Enumerable.Range(0, Model.Slide.Blocks.Length)
			.Select(x => quizSlide.Blocks[x] is AbstractQuestionBlock
				? new QuizBlockData(Model, x, Model.QuizState)
				: null)
			.ToArray<dynamic>(),
		isGuest: Model.IsGuest,
		revealHidden: true,
		manualChecking: Model.ManualQuizCheckQueueItem,
		canUserFillQuiz: Model.CanUserFillQuiz,
		groupsIds: null,
		isLti: Model.IsLti
		);

	MvcForm form = null;
	if (Model.ManualQuizCheckQueueItem != null)
	{
		form = Html.BeginForm("ScoreQuiz", "Quiz", FormMethod.Post, new { id = "quiz__score-form" });
	}

	using (form)
	{
		if (Model.ManualQuizCheckQueueItem != null)
		{
			@Html.Hidden("id", Model.ManualQuizCheckQueueItem.Id)
			@Html.Hidden("errorUrl", Url.RouteUrl("Course.SlideById", new { courseId = Model.Course.Id, slideId = Model.Slide.Url, CheckQueueItemId = Model.ManualQuizCheckQueueItem.Id, group = Model.GroupsIdsJoined }) + "&error=")
			@Html.Hidden("nextUrl", Url.Action("ManualQuizCheckingQueue", "Admin", new { courseId = Model.Course.Id, group = Model.GroupsIdsJoined }))
		}
		@SlideHtml.Blocks(context, Html)
	}

	if (!Model.IsGuest)
	{
		<div id="SubmitQuiz" data-url='@Url.Action("SubmitQuiz", "Quiz")'>
			@if (Model.QuizState == QuizState.NotPassed)
			{
				<button class="btn btn-primary quiz-submit-btn" onclick="submitQuiz('@Model.Course.Id', '@Model.Slide.Id', '@Model.AnswersToQuizes.Count', @Model.IsLtiToString) ">Готово!</button>
			}
			else if (Model.QuizState == QuizState.WaitForCheck && Model.ManualQuizCheckQueueItem == null)
			{
				<button class="btn btn-primary quiz-submit-btn" onclick="submitQuiz('@Model.Course.Id', '@Model.Slide.Id', '@Model.AnswersToQuizes.Count', @Model.IsLtiToString) ">Переотправить ответы</button>
			}
			else if (Model.QuizState == QuizState.IsChecking && Model.ManualQuizCheckQueueItem != null)
			{
				<input type="submit" class="btn btn-default" form="quiz__score-form" value="Сохранить и вернуться">
				<input type="submit" class="btn btn-primary" form="quiz__score-form" value="Сохранить и перейти к следующему"
						data-url="@Url.Action("CheckNextQuizForSlide", "Admin", new { courseId = Model.Course.Id, slideId = Model.Slide.Id, group = Model.GroupsIdsJoined })"
						onclick="$('[name=nextUrl]').val($(this).data('url'))">
			}
			else if (Model.QuizState == QuizState.Subtotal)
			{
				using (Html.BeginForm("DropQuiz", "Quiz"))
				{
					<input type="hidden" name="slideId" value="@Model.Slide.Id"/>
					<input type="hidden" name="courseId" value="@Model.Course.Id"/>
					<input type="hidden" name="isLti" value="@Model.IsLtiToString">
					<button class="btn btn-primary" type="submit">Пройти тест ещё раз</button>
					<small class="quiz__remains">
						@if (Model.MaxDropCount == QuizController.InfinityDropsCount)
						{
							<text>Количество попыток для&nbsp;преподавателей неограничено</text>
						}
						else
						{
							<text>У вас остал@(remains == 1 ? "а" : "о")сь @remains.PluralizeInRussian(RussianPluralizationOptions.Tries) из @(Model.MaxDropCount + 1)</text>
						}
					</small>
				}
			}
		</div>
	}
}