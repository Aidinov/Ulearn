@using Database.Extensions
@using Database.Models
@using uLearn.Quizes
@using uLearn.Web.Controllers
@using uLearn.Web.Views.Course
@using Ulearn.Common.Extensions

@model QuizModel
@{
	var quizSlide = Model.Slide;

	var status = "";
	var triesCountMessage = Model.MaxTriesCount == QuizController.InfinityTriesCount ? "∞ (преподаватели не ограничены в попытках)" : Model.MaxTriesCount.ToString();
	const string allTriesExceeded = "Использованы все попытки. Вы можете пройти тест ещё раз, но ваши баллы за него не изменятся";
	if (!Model.IsGuest && Model.QuizState == QuizState.NotPassed)
	{
		if (Model.MaxTriesCount == QuizController.InfinityTriesCount || Model.TryNumber < Model.MaxTriesCount)
		{
			status = string.Format(
				"Попытка {0} из {1}",
				Model.TryNumber + 1,
				triesCountMessage
				);
		}
		else
		{
			status = allTriesExceeded;
		}
	}
	else if (!Model.IsGuest && Model.QuizState == QuizState.Subtotal)
	{
		if (Model.MaxTriesCount == QuizController.InfinityTriesCount || Model.TryNumber <= Model.MaxTriesCount)
		{
			status = string.Format(
				"Использован{0} {1} из {2}",
				Model.TryNumber % 10 == 1 && (Model.TryNumber / 10) % 10 != 1 ? "а" : "о",
				Model.TryNumber.PluralizeInRussian(RussianPluralizationOptions.Tries),
				triesCountMessage
				);	
		}
		else
		{
			status = allTriesExceeded;
		}
	}
	else if (!Model.IsGuest && Model.QuizState == QuizState.Total)
	{
		if (Model.MaxTriesCount == QuizController.InfinityTriesCount || Model.TryNumber <= Model.MaxTriesCount)
		{
			status = string.Format("Решено с {0} попытки", Model.TryNumber);
		}
		else
		{
			status = allTriesExceeded;
		}
	}
	else if (Model.ManualQuizCheckQueueItem != null)
	{
		status = string.Format("{0}, попытка {1} из {2}",
			Model.ManualQuizCheckQueueItem.User.VisibleName,
			Model.TryNumber,
			triesCountMessage);
	}
	else if (Model.QuizState == QuizState.WaitForCheck)
	{
		status = "Ожидает проверки преподавателем";
	}
	else if (Model.QuizState == QuizState.IsChecking)
	{
		status = "Проверяется преподавателем";
	}

	if (!string.IsNullOrEmpty(status))
	{
		<p class="quiz-status">@status</p>
	}
	if (!string.IsNullOrEmpty(Request.QueryString["error"]))
	{
		<p class="alert alert-danger">@Request.QueryString["error"]</p>
	}

	var remains = Model.MaxTriesCount - Model.TryNumber;
	var isInstructor = User.HasAccessFor(Model.Course.Id, CourseRole.Instructor);
	var isCourseAdmin = User.HasAccessFor(Model.Course.Id, CourseRole.CourseAdmin);
	var blockData = new dynamic[Model.Slide.Blocks.Length];
	for (var blockIndex = 0; blockIndex < Model.Slide.Blocks.Length; blockIndex++)
	{
		var block = quizSlide.Blocks[blockIndex];
		if (block is AbstractQuestionBlock)
		{
			blockData[blockIndex] = new QuizBlockData(
				Model,
				blockIndex,
				Model.QuizState,
				questionAnswersFrequency: Model.QuestionAnswersFrequency[(block as AbstractQuestionBlock).Id],
				isInstructor: isInstructor,
				isCourseAdmin: isCourseAdmin
			);
		}
		else
		{
			blockData[blockIndex] = null;
		}
	}
	var context = new BlockRenderContext(
		Model.Course,
		Model.Slide,
		quizSlide.Info.DirectoryRelativePath,
		blockData,
		isGuest: Model.IsGuest,
		revealHidden: true,
		manualChecking: Model.ManualQuizCheckQueueItem,
		canUserFillQuiz: Model.CanUserFillQuiz,
		groupsIds: null,
		isLti: Model.IsLti
		);

	MvcForm form = null;
	if (Model.ManualQuizCheckQueueItem != null)
	{
		form = Html.BeginForm("ScoreQuiz", "Quiz", FormMethod.Post, new { id = "quiz__score-form" });
	}

	using (form)
	{
		if (Model.ManualQuizCheckQueueItem != null)
		{
			@Html.Hidden("id", Model.ManualQuizCheckQueueItem.Id)
			@Html.Hidden("errorUrl", Url.RouteUrl("Course.SlideById", new { courseId = Model.Course.Id, slideId = Model.Slide.Url, CheckQueueItemId = Model.ManualQuizCheckQueueItem.Id, group = Model.GroupsIdsJoined }) + "&error=")
			@Html.Hidden("nextUrl", Url.Action("ManualQuizCheckingQueue", "Admin", new { courseId = Model.Course.Id, group = Model.GroupsIdsJoined }))
		}
		<div class="quiz__blocks">
		    @SlideHtml.Blocks(context, Html)
        </div>
	}

	if (!Model.IsGuest)
	{
		<div id="SubmitQuiz" data-url='@Url.Action("SubmitQuiz", "Quiz")'>
			@if (Model.QuizState == QuizState.NotPassed)
			{
				<button class="btn btn-primary quiz-button quiz-submit-btn" onclick="submitQuiz('@Model.Course.Id', '@Model.Slide.Id', '@Model.AnswersToQuizes.Count', @Model.IsLtiToString) ">Готово!</button>
			}
			else if (Model.QuizState == QuizState.WaitForCheck && Model.ManualQuizCheckQueueItem == null)
			{
				<button class="btn btn-primary quiz-button quiz-submit-btn" onclick="submitQuiz('@Model.Course.Id', '@Model.Slide.Id', '@Model.AnswersToQuizes.Count', @Model.IsLtiToString) ">Переотправить ответы</button>
			}
			else if (Model.QuizState == QuizState.IsChecking && Model.ManualQuizCheckQueueItem != null)
			{
				<input type="submit" class="btn btn-default quiz-button" form="quiz__score-form" value="Сохранить и вернуться">
				<input type="submit" class="btn btn-primary quiz-button" form="quiz__score-form" value="Сохранить и перейти к следующему"
						data-url="@Url.Action("CheckNextQuizForSlide", "Admin", new { courseId = Model.Course.Id, slideId = Model.Slide.Id, group = Model.GroupsIdsJoined })"
						onclick="$('[name=nextUrl]').val($(this).data('url'))">
			}
			else if (Model.QuizState == QuizState.Subtotal || Model.QuizState == QuizState.Total && !Model.Slide.ManualChecking)
			{
				using (Html.BeginForm("DropQuiz", "Quiz"))
				{
					<input type="hidden" name="slideId" value="@Model.Slide.Id"/>
					<input type="hidden" name="courseId" value="@Model.Course.Id"/>
					<input type="hidden" name="isLti" value="@Model.IsLtiToString">
					<button class="btn btn-primary quiz-button quiz-retry-btn" type="submit">Пройти тест ещё раз</button>
					<small class="quiz__remains">
						@if (Model.MaxTriesCount == QuizController.InfinityTriesCount)
						{
							<text>Количество попыток для&nbsp;преподавателей неограничено</text>
						}
						else if (Model.TryNumber >= Model.MaxTriesCount)
						{
							<text>Ваши попытки закончились. Вы можете попробовать пройти тест ещё раз, <strong>но ваши баллы за&nbsp;него не&nbsp;изменятся</strong>.</text>
						}
                        else if (Model.QuizState != QuizState.Total)
						{
							<text>У вас остал@(remains == 1 ? "а" : "о")сь @remains.PluralizeInRussian(RussianPluralizationOptions.Tries) из @Model.MaxTriesCount</text>
						}
					</small>
				}
			}
		</div>
	}
}