@using uLearn
@using uLearn.Model.Blocks
@using uLearn.Quizes
@model QuizAnalyticsModel

@functions {
	private static int GetColSpan(SlideBlock block)
	{
		if (block is ChoiceBlock)
			return ((ChoiceBlock)block).Items.Length;
		if (block is OrderingBlock)
			return ((OrderingBlock)block).Items.Length;
		if (block is MatchingBlock)
			return ((MatchingBlock)block).Matches.Length;
		return 1;
	}

	private string GetSubstring(string text, int length)
	{
		var substring = text.Substring(0, Math.Min(length, text.Length));
		if (substring.Length < text.Length)
			substring += "...";
		return substring;
	}

}

@{
	var quizVersionIdx = 0;
}
@foreach (var quizVersion in Model.QuizVersions)
{
	var quiz = quizVersion.RestoredQuiz;
	var isManualCheck = quiz.ManualCheck;
	<div>
		@{ var maxQuestionIndex = quiz.Blocks.OfType<AbstractQuestionBlock>().Max(x => x.QuestionIndex); }
		<table class="analytics__user-answers tablesorter">
			<thead>
			<tr>
				<th style="border-bottom: none" title="при наведении на шапку таблицы, можно прочитать условие задания и вариант ответа" data-sorter="true">наведи на меня!</th>
				<th style="border-bottom: none">Группы</th>
				<th style="border-bottom: none" data-sorter="false"></th>
				@foreach (var block in quiz.Blocks.OfType<AbstractQuestionBlock>().OrderBy(x => x.QuestionIndex))
				{
					int rightAnswersCount;
					Model.RightAnswersCount.TryGetValue(block.QuestionIndex.ToString(), out rightAnswersCount);
					var colspan = isManualCheck ? 1 : GetColSpan(block);
					<th title="@block.Text" colspan="@colspan">@block.Text (@rightAnswersCount/@Model.UserAnswers.Count)</th>
					if (maxQuestionIndex == block.QuestionIndex)
					{
						break;
					}
					<th style="border-bottom: none" data-sorter="false"></th>
				}
			</tr>
			@if (!isManualCheck)
			{
				<tr>
					<th style="border-top: none" title="при наведении на шапку таблицы, можно прочитать условие задания и вариант ответа"></th>
					<th style="border-top: none"></th>
					<th style="border-top: none;border-bottom: none" data-sorter="false"></th>
					@foreach (var block in quiz.Blocks.OfType<AbstractQuestionBlock>().OrderBy(x => x.QuestionIndex))
					{
						if (block is ChoiceBlock)
						{
							var choiseBlock = ((ChoiceBlock)block);
							foreach (var item in choiseBlock.Items.OrderBy(x => x.Id))
							{
								<th title="@item.Description">@GetSubstring(item.Description, 40)</th>
							}
						}
						else if (block is FillInBlock)
						{
							<th>user answer</th>
						}
						else if (block is OrderingBlock)
						{
							var orderingBlock = (OrderingBlock)block;
							foreach (var item in orderingBlock.Items.OrderBy(x => x.Id))
							{
								<th title="@item.Text">@GetSubstring(item.Text, 40)</th>
							}
						}
						else if (block is MatchingBlock)
						{
							var matchingBlock = (MatchingBlock)block;
							foreach (var text in matchingBlock.Matches.OrderBy(x => x.Id).Select(x => x.FixedItem))
							{
								<th title="@text">@GetSubstring(text, 40)</th>
							}
						}
						else
						{
							<th>IsRight</th>
						}
						if (maxQuestionIndex == block.QuestionIndex)
						{
							break;
						}
						<th style="border-top: none;border-bottom: none" data-sorter="false"></th>
					}
				</tr>
			}
			</thead>
			<tbody>
			@{
				var users = Model.UsersByQuizVersion.Get(quizVersion.Id, new List<string>());
			}
			@foreach (var user in users)
			{
				var group = Model.GroupByUser.Get(user, "");
				<tr>
					<td>@user</td>
					<td data-sort-value="@(string.IsNullOrEmpty(group) ? "—" : group)">@group</td>
					<td style="border-top: none;border-bottom: none"></td>
					@foreach (var ans in Model.UserAnswers[user])
					{
						if (isManualCheck)
						{
							if (Model.UsersWaitsForManualCheck.Contains(user))
							{
								<td class="manualQuizAnswer" data-sort-value="0" title="Ожидает проверки инструктором"></td>
							}
							else
							{
								var fillClass = ans.Score == ans.MaxScore ? "rightQuizAnswer" : "falseQuizAnswer";
								<td class="@fillClass" data-sort-value="@ans.Score">@ans.Score из @ans.MaxScore</td>
							}
						}
						else
						{
							if (ans is FillInBlockAnswerInfo)
							{
								var answer = (FillInBlockAnswerInfo)ans;
								var fillClass = answer.IsRight ? "rightQuizAnswer" : "falseQuizAnswer";
								<td class="@fillClass">@(answer.Answer)</td>
							}
							else if (ans is IsTrueBlockAnswerInfo)
							{
								var answer = (IsTrueBlockAnswerInfo)ans;
								<td class="@(answer.IsRight ? "rightQuizAnswer" : "falseQuizAnswer")" data-sort-value="@answer.Answer"><i class="@(answer.Answer ? "glyphicon glyphicon-ok" : "")"></i></td>
							}
							else if (ans is OrderingBlockAnswerInfo)
							{
								var answer = (OrderingBlockAnswerInfo)ans;
								for (var idx = 0; idx < answer.AnswersPositions.Count; idx++)
								{
									var userAnswerPosition = answer.AnswersPositions[idx];
									var isRight = userAnswerPosition == idx;
									<td class="@(isRight ? "rightQuizAnswer" : "falseQuizAnswer")">
										@(isRight ? "" : (1 + userAnswerPosition).ToString())
									</td>
								}
							}
							else if (ans is MatchingBlockAnswerInfo)
							{
								var answer = (MatchingBlockAnswerInfo)ans;
								foreach (var isRight in answer.IsRightMatches)
								{
									<td class="@(isRight ? "rightQuizAnswer" : "falseQuizAnswer")">
									</td>
								}
							}
							else
							{
								var answer = (ChoiceBlockAnswerInfo)ans;
								foreach (var item in answer.AnswersId)
								{
									var isContain = answer.RealyRightAnswer.Contains(item.Key);
									var classForCell = ((isContain && item.Value) || (!isContain && !item.Value)) ? "rightQuizAnswer" : "falseQuizAnswer";
									var itemClass = item.Value ? "glyphicon glyphicon-ok" : "";
									<td class="@classForCell" data-sort-value="@item.Value"><i class="@itemClass"></i></td>
								}
							}
						}
						if (maxQuestionIndex == int.Parse(ans.Id))
						{
							break;
						}
						<td style="border-top: none;border-bottom: none"></td>
					}
				</tr>
			}
			</tbody>
		</table>
		@if (quizVersionIdx != Model.QuizVersions.Count - 1)
		{
			var nextQuizVersion = Model.QuizVersions[quizVersionIdx + 1];
			using (Html.BeginForm("MergeQuizVersions", "Quiz", FormMethod.Post))
			{
				@Html.AntiForgeryToken()
				<div class="analytics__quiz-version__info">
					Изменено @quizVersion.LoadingTime
				</div>
				if (quizVersion.RestoredQuiz.HasEqualStructureWith(nextQuizVersion.RestoredQuiz))
				{
					<div class="analytics__quiz-version__merge">
						@Html.Hidden("courseId", Model.CourseId)
						@Html.Hidden("slideId", Model.SlideId)
						@Html.Hidden("quizVersionId", nextQuizVersion.Id)
						@Html.Hidden("mergeWithQuizVersionId", quizVersion.Id)
						<button class="btn btn-success" type="submit">Склеить версии</button> <small>(это незначительное изменение)</small>
					</div>
				}
			}
		}

	</div>
	{
		quizVersionIdx++;
	}
}
<script src="~/tablesorter-master/js/jquery.tablesorter.js"></script>
<script src="~/tablesorter-master/js/jquery.tablesorter.widgets.min.js"></script>
<script src="~/Scripts/table-configurator.js"></script>
