@using LtiLibrary.Core.Extensions
@using uLearn
@using uLearn.Web.Extensions
@model CourseStatisticPageModel

@functions {
	private int GetTotalScoreForUserInUnitByScoringGroup(string userId, Unit unit, ScoringGroup scoringGroup)
	{
		return Model.ScoreByUserUnitScoringGroup[Tuple.Create(userId, unit.Id, scoringGroup.Id)] +
				Model.AdditionalScores[Tuple.Create(userId, unit.Id, scoringGroup.Id)];
	}

	private int GetMaxScoreForUnitByScoringGroup(Unit unit, ScoringGroup scoringGroup)
	{
		var unitScoringGroup = unit.Scoring.Groups.Values.FirstOrDefault(g => g.Id == scoringGroup.Id);
		var maxAdditionalScore = unitScoringGroup != null && unitScoringGroup.CanBeSetByInstructor ? unitScoringGroup.MaxAdditionalScore : 0;
		return unit.Slides.Where(s => s.ScoringGroup == scoringGroup.Id).Sum(s => s.MaxScore) + maxAdditionalScore;
	}

	/* Returns css class from grade-0 to grade-15*/
	private string GradeCssClass(int score, int maxScore)
	{
		if (score > maxScore)
			score = maxScore;

		return score == 0 ? "" : "grade-" + Math.Round(15.0 * score / maxScore);
	}

	private SortedDictionary<string, ScoringGroup> GetUsingUnitScoringGroups(Unit unit, SortedDictionary<string, ScoringGroup> courseScoringGroups)
	{
		return unit.Scoring.Groups
			.Where(kv => courseScoringGroups.ContainsKey(kv.Key))
			.ToDictionary(kv => kv.Key, kv => kv.Value)
			.ToSortedDictionary();
	}
}

@{
	ViewBag.Title = Model.Course.Title;
}

<body>
<div class="wide-container">
	<h2>
		@if (!Model.IsInstructor)
		{
			@Html.RouteLink("←", "Course.Slide", new { courseId = Model.Course.Id }, new { title = "Вернуться в курс" })
		}
		@Model.Course.Title
		@if (!Model.IsInstructor)
		{
			var group = Model.Groups.FirstOrDefault(g => Model.SelectedGroupsIds.Contains(g.Id.ToString()));
			if (group != null)
			{
				<text>в&nbsp;@group.Name</text>
			}
		}
	</h2>

	<div class="analytics__dashboard">
		@if (Model.IsInstructor)
		{
			using (Html.BeginForm("CourseStatistics", "Analytics", FormMethod.Get, new { @class = "form-inline", id = "unit-statistics-filter-form" }))
			{
				@Html.Hidden("courseId", Model.Course.Id)

				<div id="filters">
					@Html.Partial("~/Views/Shared/_GroupsFilter.cshtml", new GroupsFilterViewModel
					{
						CourseId = Model.Course.Id,
						SelectedGroupsIds = Model.SelectedGroupsIds,
						Groups = Model.Groups,
					})

					<div class="form-group">
						<button role="button" class="btn btn-primary">Отфильтровать</button>
					</div>
				</div>
			}
		}

		<div class="row">
			
			@if (Model.ScoringGroups.Count > 1)
			{
				<div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
					<div class="scoring-groups-filters">
						<h3>Баллы</h3>
						@foreach (var scoringGroup in Model.ScoringGroups.Values)
						{
							<div class="checkbox checkbox-default">
								@Html.CheckBox("scoring-group__" + scoringGroup.Id, true, new { @class = "course-statistics__enable-scoring-group__checkbox", data_scoring_group = scoringGroup.Id })
								<label for="scoring-group__@scoringGroup.Id">
									@scoringGroup.Name (@scoringGroup.Abbreviation)
								</label>
								<span class="glyphicon glyphicon-refresh glyphicon-refresh-animate loading-icon" style="display: none"></span>
							</div>
						}
					</div>
				</div>
			}

			@if (Model.IsInstructor)
			{
				<div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
					<h3>Группировать</h3>
					<div class="checkbox checkbox-default">
						@Html.CheckBox("grouping-by-group", true)
						<label for="grouping-by-group">
							По группам
						</label>
						<span class="glyphicon glyphicon-refresh glyphicon-refresh-animate loading-icon" style="display: none"></span>
					</div>
				</div>
			}

			@{
				var grouppingByGroup = Model.IsInstructor;
			}
		</div>

		@{
			var orderingHint = "Нажмите для сортироки по этому полю. Нажмите с зажатым Shift, чтобы сортировать по нескольким столбцам";
		}
		<div class="course-statistics__wrapper">
			<table class="course-statistics" data-initial-order="desc">
				<thead>
					<tr>
						<th rowspan="2">Фамилия Имя</th>
						<th colspan="@Model.ScoringGroups.Count" data-unit-id="sum">
							<div class="unit-title" data-unit-id="sum">Сумма</div>
						</th>
						@foreach (var unit in Model.Course.Units)
						{
							<th colspan="@(GetUsingUnitScoringGroups(unit, Model.ScoringGroups).Count)"
							    title="@(Model.IsInstructor ? "Посмотреть ведомость по модулю «@unit.Title»" : "" )"
							    data-unit-id="@unit.Id">
								<div class="unit-title" data-unit-id="@unit.Id">
									@if (Model.IsInstructor)
									{
										@Html.ActionLink(unit.Title.TruncateWithEllipsis(20), "UnitStatistics", "Analytics", new { courseId = Model.Course.Id, unitId = unit.Id, group = Model.SelectedGroupsIdsJoined }, new { })
									}
									else
									{
										@unit.Title.TruncateWithEllipsis(20)
									}
								</div>
							</th>
						}
					</tr>
					<tr>
						@foreach (var scoringGroup in Model.ScoringGroups.Values)
						{
							<th class="scoring-group-title" title="@orderingHint" data-sorter="true"
								data-unit-id="sum" data-scoring-group="@scoringGroup.Id">@scoringGroup.Abbreviation</th>
						}
						@foreach (var unit in Model.Course.Units)
						{
							foreach (var scoringGroup in GetUsingUnitScoringGroups(unit, Model.ScoringGroups).Values)
							{
								var shouldBeSolvedSlides = Model.ShouldBeSolvedSlidesByUnitScoringGroup[Tuple.Create(unit.Id, scoringGroup.Id)];
								<th class="scoring-group-title" title="@orderingHint" data-sorter="true"
									data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id" data-expanded="false">
									@if (shouldBeSolvedSlides.Count > 0)
									{
										<a href="#" class="expand-scoring-group__link  internal-page-link" title="Развернуть @scoringGroup.Name">&nbsp;@scoringGroup.Abbreviation&nbsp;<span class="expand-icon">&#9654;</span></a>
									}
									else
									{
										@scoringGroup.Abbreviation
									}
								</th>
								foreach (var slide in shouldBeSolvedSlides)
								{
									<th class="slide-title" title="@slide.Title" data-sorter="true"
										data-slide-id="@slide.Id" data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id">
										<div class="slide-title__content">@slide.Title.TruncateWithEllipsis(8, "")</div>
									</th>
								}
								if (shouldBeSolvedSlides.Count > 0 && scoringGroup.CanBeSetByInstructor)
								{
									<th class="slide-title" title="@orderingHint" data-sorter="true"
										data-slide-id="additional" data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id">
										<div class="slide-title__content">Доп</div>
									</th>
								}
							}
						}
					</tr>
					<tr>
						<th class="scoring-group-max-score" style="text-align: right">Максимум:</th>
						@foreach (var scoringGroup in Model.ScoringGroups.Values)
						{
							<th class="scoring-group-max-score"
								data-unit-id="sum" data-scoring-group="@scoringGroup.Id">@Model.Course.Units.Sum(unit => GetMaxScoreForUnitByScoringGroup(unit, scoringGroup))</th>
						}
						@foreach (var unit in Model.Course.Units)
						{
							foreach (var scoringGroup in GetUsingUnitScoringGroups(unit, Model.ScoringGroups).Values)
							{
								<th class="scoring-group-max-score"
									data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id">@GetMaxScoreForUnitByScoringGroup(unit, scoringGroup)</th>
								var shouldBeSolvedSlides = Model.ShouldBeSolvedSlidesByUnitScoringGroup[Tuple.Create(unit.Id, scoringGroup.Id)];
								foreach (var slide in shouldBeSolvedSlides)
								{
									<th class="slide-max-score"
										data-slide-id="@slide.Id" data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id">
										@slide.MaxScore
									</th>
								}
								if (shouldBeSolvedSlides.Count > 0 && scoringGroup.CanBeSetByInstructor)
								{
									<th class="slide-max-score"
										data-slide-id="additional" data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id">
										@scoringGroup.MaxAdditionalScore
									</th>
								}
							}
						}
					</tr>
				</thead>
				<tbody>
					@{
						var groupsNames = Model.Groups.ToDictionary(g => g.Id, g => g.Name);
						var differentGroupsIds = new HashSet<int>(
							Model.VisitedUsersGroups
								.SelectMany(pair => pair.Value)
								.ToList()
								.OrderBy(groupId => groupsNames.GetOrDefault(groupId, ""))
						).ToList();

						/* Special group with Id = -1 for users not in any group */
						if (Model.VisitedUsers.Any(user => Model.VisitedUsersGroups[user.UserId].Count == 0))
						{
							differentGroupsIds.Add(-1);
						}

						var usersByGroup = new DefaultDictionary<int, List<UnitStatisticUserInfo>>();
						if (grouppingByGroup)
						{
							foreach (var groupId in differentGroupsIds)
							{
								var groupUsers = Model.VisitedUsers.Where(user => Model.VisitedUsersGroups[user.UserId].Contains(groupId)).ToList();
								if (groupId == -1)
								{
									var usersWithoutGroup = Model.VisitedUsersGroups.Where(kv => kv.Value.Count == 0).Select(kv => kv.Key).ToList();
									groupUsers = Model.VisitedUsers.Where(user => usersWithoutGroup.Contains(user.UserId)).ToList();
								}
								usersByGroup[groupId] = groupUsers;
							}
						}
						else
						{
							/* If groupping by group is disabled, put one users in one group */
							differentGroupsIds = new List<int> { -1 };
							usersByGroup[-1] = Model.VisitedUsers;
						}
					}
					@foreach (var groupId in differentGroupsIds)
					{
						var groupUsers = usersByGroup[groupId];

						if (grouppingByGroup)
						{
							<tr class="group-header-row" data-group="@groupId">
								<td colspan="1000" class="group-header">
									@groupsNames.GetOrDefault(groupId, "Не в группах")
								</td>
							</tr>
						}
						foreach (var user in groupUsers.OrderBy(user => user.UserVisibleName))
						{
							<tr class="student" data-user-id="@user.UserId" data-group="@groupId">
								<td title="@user.UserName" class="student-name">@user.UserVisibleName</td>

								@foreach (var scoringGroup in Model.ScoringGroups.Values)
								{
									var scoringGroupScore = Model.Course.Units.Sum(unit => GetTotalScoreForUserInUnitByScoringGroup(user.UserId, unit, scoringGroup));
									<td class="score scoring-group-score scoring-group-sum-score" data-unit-id="sum" data-scoring-group="@scoringGroup.Id">
										@scoringGroupScore
									</td>
								}

								@foreach (var unit in Model.Course.Units)
								{
									foreach (var scoringGroup in GetUsingUnitScoringGroups(unit, Model.ScoringGroups).Values)
									{
										var scoringGroupScore = GetTotalScoreForUserInUnitByScoringGroup(user.UserId, unit, scoringGroup);
										<td class="score scoring-group-score @GradeCssClass(scoringGroupScore, GetMaxScoreForUnitByScoringGroup(unit, scoringGroup))"
											data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id">
											@scoringGroupScore
										</td>
										var shouldBeSolvedSlides = Model.ShouldBeSolvedSlidesByUnitScoringGroup[Tuple.Create(unit.Id, scoringGroup.Id)];
										foreach (var slide in shouldBeSolvedSlides)
										{
											var slideScore = Model.ScoreByUserAndSlide.GetOrDefault(Tuple.Create(user.UserId, slide.Id), 0);
											<td class="score slide-score @GradeCssClass(slideScore, slide.MaxScore)"
												data-slide-id="@slide.Id" data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id">
												@slideScore
											</td>
										}
										if (shouldBeSolvedSlides.Count > 0 && scoringGroup.CanBeSetByInstructor)
										{
											var slideScore = Model.AdditionalScores[Tuple.Create(user.UserId, unit.Id, scoringGroup.Id)];
											<td class="score slide-score @GradeCssClass(slideScore, scoringGroup.MaxAdditionalScore)"
												data-slide-id="additional" data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id">
												@slideScore
											</td>
										}
									}
								}
							</tr>
						}
					}
				</tbody>
			</table>
		</div>
		@if (Model.VisitedUsersIsMore)
		{
			<div class="text-muted">
				Показаны <b>300</b> лучших студентов
			</div>
		}

		@if (Model.VisitedUsers.Count == 0)
		{
			<div class="text-muted">
				Нет студентов
			</div>
		}
	</div>
</div>
</body>
