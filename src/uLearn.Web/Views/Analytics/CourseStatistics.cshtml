@using uLearn
@using uLearn.Web.Extensions
@model CourseStatisticPageModel

@functions {
	private int GetTotalScoreForUserInUnitByScoringGroup(string userId, Unit unit, ScoringGroup scoringGroup)
	{
		return Model.ScoreByUserUnitScoringGroup[Tuple.Create(userId, unit.Id, scoringGroup.Id)] +
				Model.AdditionalScores[Tuple.Create(userId, unit.Id, scoringGroup.Id)];
	}

	private int GetMaxScoreForUnitByScoringGroup(Unit unit, ScoringGroup scoringGroup)
	{
		var unitScoringGroup = unit.Scoring.Groups.Values.FirstOrDefault(g => g.Id == scoringGroup.Id);
		var maxAdditionalScore = unitScoringGroup != null && unitScoringGroup.CanBeSetByInstructor ? unitScoringGroup.MaxAdditionalScore : 0;
		return unit.Slides.Where(s => s.ScoringGroup == scoringGroup.Id).Sum(s => s.MaxScore) + maxAdditionalScore;
	}

	/* Returns css class from grade-0 to grade-15*/
	private string GradeCssClass(int score, int maxScore)
	{
		return score == 0 ? "" : "grade-" + Math.Round(15.0 * score / maxScore);
	}
}

@{
	ViewBag.Title = Model.Course.Title;
}

<body>
<div class="wide-container">
	<h2>@Model.Course.Title</h2>

	<div class="analytics__dashboard">
		@using (Html.BeginForm("CourseStatistics", "Analytics", FormMethod.Get, new { @class = "form-inline", id = "unit-statistics-filter-form" }))
		{
			@Html.Hidden("courseId", Model.Course.Id)

			<div id="filters" class="hidden-xs-inline">
				@Html.Partial("~/Views/Shared/_GroupsFilter.cshtml", new GroupsFilterViewModel
				   {
					   CourseId = Model.Course.Id,
					   SelectedGroupsIds = Model.SelectedGroupsIds,
					   Groups = Model.Groups,
				   })

				<div class="form-group">
					<button role="button" class="btn btn-primary">Отфильтровать</button>
				</div>
			</div>
		}

		<div class="scoring-groups-filters">
			<h3>Показывать баллы:</h3>
			@foreach (var scoringGroup in Model.ScoringGroups.Values)
			{
				<div class="checkbox checkbox-default">
					@Html.CheckBox("scoring-group__" + scoringGroup.Id, true, new { @class="course-statistics__enable-scoring-group__checkbox", data_scoring_group=scoringGroup.Id })
					<label for="scoring-group__@scoringGroup.Id">
						@scoringGroup.Name (@scoringGroup.Abbreviation)
					</label>
				</div>
			}
		</div>

		@{
			var orderingHint = "Нажмите для сортироки по этому полю. Нажмите с зажатым Shift, чтобы сортировать по нескольким столбцам";
		}
		<table class="course-statistics" data-initial-order="desc">
			<thead>
			<tr>
				<th rowspan="2">Фамилия Имя</th>
				<th colspan="@Model.ScoringGroups.Count">
					<div class="unit-title" data-unit-id="sum">Сумма</div>
				</th>
				@foreach (var unit in Model.Course.Units)
				{
					<th colspan="@unit.Scoring.Groups.Count" title="Посмотреть статистику по модулю «@unit.Title»" data-unit-id="@unit.Id">
						<div class="unit-title" data-unit-id="@unit.Id">
							@Html.ActionLink(unit.Title.TruncateWithEllipsis(20), "UnitStatistics", "Analytics", new { courseId = Model.Course.Id, unitId = unit.Id, group = Model.SelectedGroupsIdsJoined }, new { })
						</div>
					</th>
				}
			</tr>
			<tr>
				@foreach (var scoringGroup in Model.ScoringGroups.Values)
				{
					<th class="scoring-group-title" title="@scoringGroup.Name"
					    data-unit-id="sum" data-scoring-group="@scoringGroup.Id">@scoringGroup.Abbreviation</th>
				}
				@foreach (var unit in Model.Course.Units)
				{
					foreach (var scoringGroup in unit.Scoring.Groups.Values)
					{
						var shouldBeSolvedSlides = Model.ShouldBeSolvedSlidesByUnitScoringGroup[Tuple.Create(unit.Id, scoringGroup.Id)];
						<th class="scoring-group-title"
						    data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id" data-expanded="false">
							@if (shouldBeSolvedSlides.Count > 0)
							{
								<a href="#" class="expand-scoring-group__link  internal-page-link" title="Развернуть @scoringGroup.Name">&nbsp;@scoringGroup.Abbreviation&nbsp;<span class="expand-icon">&#9654;</span></a>
							}
							else
							{
								@scoringGroup.Abbreviation
							}
						</th>
						foreach (var slide in shouldBeSolvedSlides)
						{
							<th class="slide-title" title="@slide.Title"
							    data-slide-id="@slide.Id" data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id">
								<div class="slide-title__content">@slide.Title.TruncateWithEllipsis(8, "")</div>
							</th>
						}
						if (shouldBeSolvedSlides.Count > 0 && scoringGroup.CanBeSetByInstructor)
						{
							<th class="slide-title"
							    data-slide-id="additional" data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id">
								<div class="slide-title__content">Доп</div>
							</th>
						}
					}
				}
			</tr>
			<tr>
				<th class="scoring-group-max-score" style="text-align: right">Максимум:</th>
				@foreach (var scoringGroup in Model.ScoringGroups.Values)
				{
					<th class="scoring-group-max-score" title="@orderingHint" data-sorter="true"
						 data-unit-id="sum" data-scoring-group="@scoringGroup.Id">@Model.Course.Units.Sum(unit => GetMaxScoreForUnitByScoringGroup(unit, scoringGroup))</th>
				}
				@foreach (var unit in Model.Course.Units)
				{
					foreach (var scoringGroup in unit.Scoring.Groups.Values)
					{
						<th class="scoring-group-max-score" title="@orderingHint" data-sorter="true"
							data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id">@GetMaxScoreForUnitByScoringGroup(unit, scoringGroup)</th>
						var shouldBeSolvedSlides = Model.ShouldBeSolvedSlidesByUnitScoringGroup[Tuple.Create(unit.Id, scoringGroup.Id)];
						foreach (var slide in shouldBeSolvedSlides)
						{
							<th class="slide-max-score" title="@orderingHint" data-sorter="true"
								data-slide-id="@slide.Id" data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id">
								@slide.MaxScore
							</th>
						}
						if (shouldBeSolvedSlides.Count > 0 && scoringGroup.CanBeSetByInstructor)
						{
							<th class="slide-max-score" title="@orderingHint" data-sorter="true"
								data-slide-id="additional" data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id">
								@scoringGroup.MaxAdditionalScore
							</th>
						}
					}
				}
			</tr>
			</thead>
			<tbody>
			@foreach (var user in Model.VisitedUsers)
			{
				<tr class="student" data-user-id="@user.UserId" data-group-id="@Model.VisiterUsersGroups[user.UserId]">
					<td title="@user.UserName @user.UserId" class="student-name">@user.UserVisibleName</td>

					@foreach (var scoringGroup in Model.ScoringGroups.Values)
					{
						var scoringGroupScore = Model.Course.Units.Sum(unit => GetTotalScoreForUserInUnitByScoringGroup(user.UserId, unit, scoringGroup));
						<td class="score scoring-group-score scoring-group-sum-score" data-unit-id="sum" data-scoring-group="@scoringGroup.Id">
							@scoringGroupScore
						</td>
					}

					@foreach (var unit in Model.Course.Units)
					{
						foreach (var scoringGroup in Model.ScoringGroups.Values)
						{
							var scoringGroupScore = GetTotalScoreForUserInUnitByScoringGroup(user.UserId, unit, scoringGroup);
							<td class="score scoring-group-score @GradeCssClass(scoringGroupScore, GetMaxScoreForUnitByScoringGroup(unit, scoringGroup))"
							    data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id">
								@scoringGroupScore
							</td>
							var shouldBeSolvedSlides = Model.ShouldBeSolvedSlidesByUnitScoringGroup[Tuple.Create(unit.Id, scoringGroup.Id)];
							foreach (var slide in shouldBeSolvedSlides)
							{
								var slideScore = Model.ScoreByUserAndSlide.GetOrDefault(Tuple.Create(user.UserId, slide.Id), 0);
								<td class="score slide-score @GradeCssClass(slideScore, slide.MaxScore)"
								    data-slide-id="@slide.Id" data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id">
									@slideScore
								</td>
							}
							if (shouldBeSolvedSlides.Count > 0 && scoringGroup.CanBeSetByInstructor)
							{
								var slideScore = Model.AdditionalScores[Tuple.Create(user.UserId, unit.Id, scoringGroup.Id)];
								<td class="score slide-score @GradeCssClass(slideScore, scoringGroup.MaxAdditionalScore)"
								    data-slide-id="additional" data-unit-id="@unit.Id" data-scoring-group="@scoringGroup.Id">
									@slideScore
								</td>
							}
						}
					}
				</tr>
			}
			</tbody>
		</table>

		@if (Model.VisitedUsersIsMore)
		{
			<div class="text-muted">
				Показаны <b>200</b> лучших студентов
			</div>
		}
	</div>
</div>
</body>
